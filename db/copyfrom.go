// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCopy implements pgx.CopyFromSource.
type iteratorForCopy struct {
	rows                 []AccessRule
	skippedFirstNextCall bool
}

func (r *iteratorForCopy) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCopy) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Ptype,
		r.rows[0].V0,
		r.rows[0].V1,
		r.rows[0].V2,
		r.rows[0].V3,
		r.rows[0].V4,
		r.rows[0].V5,
	}, nil
}

func (r iteratorForCopy) Err() error {
	return nil
}

func (q *Queries) Copy(ctx context.Context, arg []AccessRule) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"access_rules"}, []string{"id", "ptype", "v0", "v1", "v2", "v3", "v4", "v5"}, &iteratorForCopy{rows: arg})
}
